blueprint:
  name: Sensor-activated light
  description: Turn a light on based on sensor
  domain: automation
  input:
    control_sensor:
      name: Control Sensor
      description: This sensor will be (de-)activating the light.
      selector:
        entity:
          filter:
            domain: binary_sensor
    target_light:
      name: Light
      description: The light to control.
      selector:
        target:
          entity:
            domain: light
trigger:
  - platform: state
    entity_id: !input control_sensor
    from: "off"
    to: "on"
condition:
  - condition: state
    entity_id: !input target_light
    state: "off"
action:
  - service: light.turn_on
    target: !input target_light
  - alias: "wait"
    wait_for_trigger:
      - platform: state
        entity_id: !input target_light
        from: "on"
        to: "off"
      - platform: state
        entity_id: !input control_sensor
        from: "on"
        to: "off"
  - condition: template
    value_template: >
      {{ wait.trigger.entity_id == !input control_sensor }}
  - service: light.turn_off
    target: !input target_light
